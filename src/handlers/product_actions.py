from main import dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup

from states import ProductAdd, ProductEdit, ProductRemove
from storages import cur, conn
from utility import akb1, akb3, akbb, hkb, user_check


@dp.message_handler(Text(equals='–í—Å–µ —Ç–æ–≤–∞—Ä—ã'))
@user_check
async def view_pr(message: Message):
    kb = akb1()
    cur.execute("SELECT name FROM products")
    products = cur.fetchall()
    pr = ',\n'.join(list(map(lambda x: f'<b>{x[0]}</b>', products)))
    await message.answer(f'–ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã:\n{pr}', reply_markup=kb)


@dp.message_handler(Text(equals="–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä üõçÔ∏è"))
async def cmd_link(message: Message):
    cur.execute("SELECT name FROM products")
    product_obj = cur.fetchall()
    products = list(map(lambda x: x[0], product_obj))
    buttons = [KeyboardButton(text=f"{p} {random_em()}") for p in products]
    kb = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    kb.add(*buttons)
    kb.add("–û—Ç–º–µ–Ω–∞ üîô")
    await ClientDialog.client_choose.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ <b>–º–µ–Ω—é</b>", reply_markup=kb, )


@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'))
@user_check
async def add_pr(message: Message):
    await ProductAdd.add_product.set()
    kb = akbb()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–∏–Ω–≥–∏ –∂–µ–Ω—Å–∫–∏–µ)', reply_markup=kb)


@dp.message_handler(state=ProductAdd.add_product)
async def process_pr_1(message: Message, state: FSMContext):
    if message.text.startswith('–û—Ç–º–µ–Ω–∞'):
        kb = akb1()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb)
        await state.finish()
    else:
        async with state.proxy() as data:
            data['name'] = message.text
        kb = akbb()
        await ProductAdd.next()
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=kb)


@dp.message_handler(state=ProductAdd.add_description)
async def process_pr_2(message: Message, state: FSMContext):
    if message.text.startswith('–û—Ç–º–µ–Ω–∞'):
        kb = akb1()
        await message.answer('–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb)
        await state.finish()
    else:
        async with state.proxy() as data:
            data['description'] = message.text
        kb = akbb()
        kb.row(KeyboardButton(text="–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"))
        await ProductAdd.next()
        await message.answer(f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ', reply_markup=kb)


@dp.message_handler(content_types=['photo', 'text'], state=ProductAdd.add_photo)
async def process_pr_3(message: Message, state: FSMContext):

    if message['photo']:
        async with state.proxy() as data:
            data['photo'] = message.photo[0].file_id
        kb = akbb()
        kb.row(KeyboardButton(text="–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"))
        await ProductAdd.next()
        await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π', reply_markup=kb)
    elif message.text and message.text.startswith('–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'):
        async with state.proxy() as data:
            data['photo'] = message.text
        kb = akbb()
        kb.row(KeyboardButton(text="–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"))
        await ProductAdd.next()
        await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π', reply_markup=kb)

    elif message.text and message.text.startswith('–û—Ç–º–µ–Ω–∞'):
        kb = akb1()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb)
        await state.finish()
    else:
        kb = akb1()
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n<b>–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>',
                             reply_markup=kb)
        await state.finish()


@dp.message_handler(content_types=['document', 'text'], state=ProductAdd.add_file)
async def process_pr_4(message: Message, state: FSMContext):

    if message['document']:

        async with state.proxy() as data:
            data['file'] = message.document.file_id
        kb = akbb()
        kb.row(KeyboardButton(text="–ù–µ—Ç –≤–∏–¥–µ–æ"))
        await ProductAdd.next()
        await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ', reply_markup=kb)

    elif message.text and message.text.startswith('–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π'):
        async with state.proxy() as data:
            data['file'] = message.text
        kb = akbb()
        kb.row(KeyboardButton(text="–ù–µ—Ç –≤–∏–¥–µ–æ"))
        await ProductAdd.next()
        await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ', reply_markup=kb)
    elif message.text and message.text.startswith('–û—Ç–º–µ–Ω–∞'):
        kb = akb1()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb)
        await state.finish()
    else:
        kb = akb1()
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n<b>–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>', reply_markup=kb)
        await state.finish()


@dp.message_handler(content_types=['video', 'text'], state=ProductAdd.add_video)
async def process_pr_5(message: Message, state: FSMContext):

    if message['video']:
        async with state.proxy() as data:
            data['video'] = message.video.file_id
        kb = akb1()
        async with state.proxy() as data:
            cur.execute(f"""INSERT INTO products(name, description, photo_id, file_id, video_id)
                                                        VALUES('{data['name']}', '{data['description']}',
                                                        '{data['photo']}', '{data['file']}', '{data['video']}');""")
            conn.commit()
        await state.finish()
        await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)
    elif message.text and message.text.startswith('–ù–µ—Ç –≤–∏–¥–µ–æ'):
        async with state.proxy() as data:
            data['video'] = message.text
        kb = akb1()
        async with state.proxy() as data:
            cur.execute(f"""INSERT INTO products(name, description, photo_id, file_id, video_id)
                                                        VALUES('{data['name']}', '{data['description']}',
                                                        '{data['photo']}', '{data['file']}', '{data['video']}');""")
            conn.commit()
        await state.finish()
        await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)

    elif message.text and message.text.startswith('–û—Ç–º–µ–Ω–∞'):
        kb = akb1()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb)
        await state.finish()
    else:
        kb = akb1()
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n<b>–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>',
                             reply_markup=kb)
        await state.finish()


@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'))
@user_check
async def remove_pr(message: Message):
    await ProductRemove.remove_product.set()
    cur.execute("""SELECT name FROM products;""")
    product_obj = cur.fetchall()
    products = list(map(lambda x: x[0], product_obj))
    buttons = [KeyboardButton(text=f"{p}") for p in products]
    kb = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    kb.add(*buttons)
    kb.add("–û—Ç–º–µ–Ω–∞ üîô")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=kb)


@dp.message_handler(state=ProductRemove.remove_product)
async def process_rem_pr1(message: Message, state: FSMContext):
    kb = akb1()
    if message.text.startswith('–û—Ç–º–µ–Ω–∞'):
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)
    else:
        cur.execute(f"SELECT name FROM products WHERE name = '{message.text}';")
        data = cur.fetchone()
        if not data:
            await state.finish()
            await message.answer(f"–¢–æ–≤–∞—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{message.text}</b> –Ω–µ—Ç. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)
        else:
            cur.execute(f"DELETE FROM products WHERE name = '{data[0]}';")
            conn.commit()
            await state.finish()
            await message.answer(f"–¢–æ–≤–∞—Ä <b>{message.text}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)


@dp.message_handler(Text(equals='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'))
@user_check
async def edit_pr(message: Message):
    await ProductEdit.edit_product_1.set()
    cur.execute("""SELECT name FROM products;""")
    product_obj = cur.fetchall()
    products = list(map(lambda x: x[0], product_obj))
    buttons = [KeyboardButton(text=f"{p}") for p in products]
    kb = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    kb.add(*buttons)
    kb.add("–û—Ç–º–µ–Ω–∞ üîô")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=kb)


@dp.message_handler(state=ProductEdit.edit_product_1)
async def process_edit_pr1(message: Message, state: FSMContext):
    kb = akb1()
    if message.text.startswith('–û—Ç–º–µ–Ω–∞'):
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)
    else:
        cur.execute(f"SELECT name FROM products WHERE name = '{message.text}';")
        data = cur.fetchone()
        if not data:
            await state.finish()
            await message.answer(f"–¢–æ–≤–∞—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{message.text}</b> –Ω–µ—Ç. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)
        else:
            async with state.proxy() as data:
                data['name'] = message.text
            kb = akb3()
            await ProductEdit.next()
            await message.answer(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {message.text}", reply_markup=kb)


@dp.message_handler(state=ProductEdit.edit_product_2)
async def process_edit_pr2(message: Message, state: FSMContext):
    kb = akb1()
    if message.text.startswith('–û—Ç–º–µ–Ω–∞'):
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)

    elif message.text == '–†–µ–¥. –æ–ø–∏—Å–∞–Ω–∏–µ':
        kb = akbb()
        async with state.proxy() as data:
            data['type'] = message.text
        await ProductEdit.next()
        await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=kb)

    elif message.text == '–†–µ–¥. —Ñ–æ—Ç–æ':
        kb = akbb()
        kb.row(KeyboardButton(text="–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"))
        async with state.proxy() as data:
            data['type'] = message.text
        await ProductEdit.next()
        await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', reply_markup=kb)
    elif message.text == '–†–µ–¥. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é':
        kb = akbb()
        kb.row(KeyboardButton(text="–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"))
        async with state.proxy() as data:
            data['type'] = message.text
        await ProductEdit.next()
        await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π', reply_markup=kb)
    elif message.text == '–†–µ–¥. –≤–∏–¥–µ–æ':
        kb = akbb()
        kb.row(KeyboardButton(text="–ù–µ—Ç –≤–∏–¥–µ–æ"))
        async with state.proxy() as data:
            data['type'] = message.text
        await ProductEdit.next()
        await message.answer(f'–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –≤–∏–¥–µ–æ', reply_markup=kb)

    else:
        kb = akb1()
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò–∑-–∑–∞ —Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)


@dp.message_handler(content_types=['video', 'text', 'document', 'photo'], state=ProductEdit.edit_product_3)
async def process_edit_pr_3(message: Message, state: FSMContext):
    kb = akb1()
    async with state.proxy() as data:
        if message['video']:
            cur.execute(f"""UPDATE products SET video_id = '{message.video.file_id}' WHERE name = '{data["name"]}';""")
            conn.commit()
            await state.finish()
            await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)

        elif message['document']:
            cur.execute(f"""UPDATE products SET file_id = '{message.document.file_id}' WHERE name = '{data["name"]}';""")
            # cur.execute(f"""INSERT or REPLACE products(file_id) into products
            #                                  VALUES('{message.document.file_id}') WHERE name = '{data["name"]}';""")
            conn.commit()
            await state.finish()
            await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)
        elif message['photo']:
            cur.execute(f"""UPDATE products SET photo_id = '{message.photo[0].file_id}' WHERE name = '{data["name"]}';""")
            # cur.execute(f"""INSERT or REPLACE products(photo_id) into products
            #                                  VALUES('{message.photo[0].file_id}') WHERE name = '{data["name"]}';""")
            conn.commit()
            await state.finish()
            await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)

        elif message.text and data["type"] == '–†–µ–¥. –æ–ø–∏—Å–∞–Ω–∏–µ':
            cur.execute(
                    f"""UPDATE products SET description = '{message.text}' WHERE name = '{data["name"]}';""")
            # cur.execute(f"""INSERT OR REPLACE INTO products(description)
            #                                            VALUES('{data['description']}');""")
            conn.commit()
            await state.finish()
            await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)


        elif message.text and message.text.startswith('–ù–µ—Ç –≤–∏–¥–µ–æ'):
            cur.execute(f"""UPDATE products SET video_id = '{message.text}' WHERE name = '{data["name"]}';""")
            # cur.execute(f"""INSERT or REPLACE products(video_id) into products
            #                                              VALUES('{message.text}') WHERE name = '{data["name"]}';""")
            conn.commit()
            await state.finish()
            await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)
        elif message.text and message.text.startswith('–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'):
            cur.execute(f"""UPDATE products SET photo_id = '{message.text}' WHERE name = '{data["name"]}';""")
            # cur.execute(f"""INSERT or REPLACE products(photo_id) into products
            #                                             VALUES('{message.text}') WHERE name = '{data["name"]}';""")
            conn.commit()
            await state.finish()
            await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)
        elif message.text and message.text.startswith('–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π'):
            cur.execute(f"""UPDATE products SET file_id = '{message.text}' WHERE name = '{data["name"]}';""")
            # cur.execute(f"""INSERT or REPLACE products(file_id) into products
            #                                             VALUES('{message.text}') WHERE name = '{data["name"]}';""")
            conn.commit()
            await state.finish()
            await message.answer(f'–¢–æ–≤–∞—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=kb)

        elif message.text and message.text.startswith('–û—Ç–º–µ–Ω–∞'):
            await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb)
            await state.finish()

        else:
            await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n<b>–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏–º—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>',
                                 reply_markup=kb)
            await state.finish()
